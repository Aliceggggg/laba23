#include "bin1.h"
#include <cstdlib>  
#include <ctime>    


TreeNode::TreeNode(int val) : value(val), left(nullptr), right(nullptr) {}


TreeNode* insert(TreeNode* root, int value) {
    if (!root) return new TreeNode(value);
    if (value < root->value) root->left = insert(root->left, value);
    else root->right = insert(root->right, value);
    return root;
}

// Заполнение дерева случайными числами
TreeNode* fillRandom(TreeNode* root, int size, int minVal, int maxVal) {
    srand(time(nullptr));
    for (int i = 0; i < size; i++) {
        int value = minVal + rand() % (maxVal - minVal + 1);
        root = insert(root, value);
    }
    return root;
}

// Заполнение дерева из файла
TreeNode* fillFromFile(TreeNode* root, const string& filename) {
    ifstream file(filename);
    int value;
    while (file >> value) {
        root = insert(root, value);
    }

    file.close();
    return root;
}

// Заполнение дерева вручную
TreeNode* fillFromTerminal(TreeNode* root) {
    int n;
    cout << "Введите количество элементов: ";
    cin >> n;

    cout << "Введите элементы:\n";
    for (int i = 0; i < n; i++) {
        int value;
        cin >> value;
        root = insert(root, value);
    }

    return root;
}

// Симметричный обход дерева
void inOrderTraversal(TreeNode* root) {
    if (!root) return;
    inOrderTraversal(root->left);
    cout << root->value << " ";
    inOrderTraversal(root->right);
}

// Построение карты родителей
void buildParentMap(TreeNode* root, unordered_map<TreeNode*, TreeNode*>& parentMap) {
    if (!root) return;

    queue<TreeNode*> q;
    q.push(root);

    while (!q.empty()) {
        TreeNode* node = q.front();
        q.pop();

        if (node->left) {
            parentMap[node->left] = node;
            q.push(node->left);
        }
        if (node->right) {
            parentMap[node->right] = node;
            q.push(node->right);
        }
    }
}

// Распространение пожара
void burnTree(TreeNode* fireStart, unordered_map<TreeNode*, TreeNode*>& parentMap) {
    queue<TreeNode*> q;
    unordered_map<TreeNode*, bool> visited;

    q.push(fireStart);
    visited[fireStart] = true;

    while (!q.empty()) {
        int size = q.size();
        cout << "Сгорают узлы: ";

        for (int i = 0; i < size; i++) {
            TreeNode* node = q.front();
            q.pop();
            cout << node->value << " ";

            if (parentMap.count(node) && !visited[parentMap[node]]) {
                q.push(parentMap[node]);
                visited[parentMap[node]] = true;
            }
            if (node->left && !visited[node->left]) {
                q.push(node->left);
                visited[node->left] = true;
            }
            if (node->right && !visited[node->right]) {
                q.push(node->right);
                visited[node->right] = true;
            }
        }

        cout << endl;
    }
}
